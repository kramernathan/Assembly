; lets you fill array with 10 values then sorts them in ascending order and prints them

%include "/usr/local/share/csc314/asm_io.inc"


segment .data


segment .bss

        count2  resd    1
    count   resd    1   ; initializes our counter (count) to 1
    arr     resd    10  ; create an array of 10 dwords uninitialized

segment .text
    global  asm_main

asm_main:
    push    ebp
    mov     ebp, esp
    ; ********** CODE STARTS HERE **********


    mov         DWORD [count], 0        ; i = 0

    read_in_loop:
        call    read_int            ; eax
        mov     ebx, DWORD [count]  ; moves count to ebx so we can add in next instruction
        mov     DWORD [arr + ebx * 4], eax

        add     DWORD [count], 1    ; i++

        cmp     ebx, 9              ; while ( i<9 )
        jl      read_in_loop


        mov             DWORD [count], 0
        mov     DWORD [count2], 0


bubble:
    mov             edi, 0    ; i = 0
    mov             esi, 0    ; checks if array has been edited

    li3:                      ; for start loop

        mov     edx, edi   ; j = i
        add     edx, 1     ; j = j + i

        mov     ebx, DWORD [arr + edi * 4]  ; arr[i]
        mov     ecx, DWORD [arr + edx * 4]  ; arr[j]
        cmp     ebx, ecx                    ; if arr[i] == arr[j]
        je      bottom                      ; jump to end of for loop

        cmp     ebx, ecx                    ; if arr[i] < arr[j]
        jl      bottom                      ; jump to end of for loop

        mov     DWORD [arr + edx * 4], ebx             ; arr[j] = arr[i]
        mov     DWORD [arr + edi * 4], ecx             ; arr[i] = arr[j]

        mov     esi, 1        ; checks that the array has been edited

         bottom:
        inc     edi           ; i++
        cmp     edi, 9       ; if i < 9
        jl      li3           ; jump to top of for loop

        cmp     esi, 1        ; if i = 1, has the array been edited
        je      bubble        ; jump to top of for loop

        mov     ebx, 0
        call    print_nl
        print_loop:
                cmp     ebx, 10
                jge             print_end

                        mov     eax, DWORD [arr + ebx * 4]
                        call    print_int
                        call    print_nl


                inc     ebx
                jmp     print_loop

        print_end:


        ; *********** CODE ENDS HERE ***********
        mov             eax, 0
        mov             esp, ebp
        pop             ebp
        ret
